generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  email         String    @unique
  emailVerified DateTime?
  name          String
  image         String?

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id])
  barberShopId String     @unique

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model BarberShop {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  slug           String   @unique
  name           String
  logoUrl        String?
  bio            String?
  whatsappNumber String?
  locationJson   Json?

  user            User?
  deletedUserInfo Json?

  weekDays         WeekDay[]
  dateReplacements DateReplacement[]
  services         Service[]
  customers        Customer[]
  schedulings      Scheduling[]

  @@map("barber_shop")
}

model WeekDay {
  id                 String @id @default(cuid())
  day                Int
  startTimeInMinutes Int
  endTimeInMinutes   Int

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id], onDelete: Cascade)
  barberShopId String

  @@map("week_days")
}

model DateReplacement {
  id                 String   @id @default(cuid())
  date               DateTime @db.Date()
  startTimeInMinutes Int
  endTimeInMinutes   Int

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id], onDelete: Cascade)
  barberShopId String

  @@map("date_replacements")
}

model Service {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  name          String
  description   String
  timeInMinutes Int

  deletedIn DateTime?

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id], onDelete: Cascade)
  barberShopId String

  schedulings Scheduling[]

  @@map("services")
}

model Customer {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  name           String
  whatsappNumber String?
  observations   String?

  deletedIn DateTime?

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id], onDelete: Cascade)
  barberShopId String

  schedulings Scheduling[]

  @@map("customers")
}

model Scheduling {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  date               DateTime         @db.Date()
  startTimeInMinutes Int
  endTimeInMinutes   Int
  customerMessage    String?
  observations       String?
  status             SchedulingStatus

  barberShop   BarberShop @relation(fields: [barberShopId], references: [id], onDelete: Cascade)
  barberShopId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  @@map("schedulings")
}

enum SchedulingStatus {
  CONFIRMED @map("confirmed")
  CANCELED  @map("canceled")

  @@map("scheduling_status")
}
